import openai
from pptx import Presentation
import textwrap

# Set your OpenAI API Key
OPENAI_API_KEY = "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"

def generate_presentation_content(topic):
    """Uses LLM (GPT-4) to generate structured slide content for a given topic."""
    prompt = f"""
    Generate a structured presentation on the topic: {topic}.
    Provide slide titles and concise bullet-point content for each slide.
    Format:
    - Title: Introduction
      Content: Overview of {topic}.
    - Title: Key Concepts
      Content: Explain the key concepts related to {topic}.
    - Title: Conclusion
      Content: Summary and future scope of {topic}.
    """

    import openai

    client = openai.OpenAI(api_key=OPENAI_API_KEY)  # Create a client

    response = client.chat.completions.create(
    model="gpt-4",
    messages=[
        {"role": "system", "content": "You are an expert presentation creator."},
        {"role": "user", "content": prompt}
    ]
)

    
    # Extract generated content
    content = response["choices"][0]["message"]["content"]
    
    # Parse LLM output into a structured list
    slides = []
    for section in content.strip().split("\n\n"):
        lines = section.split("\n")
        title = lines[0].replace("Title: ", "").strip()
        text = "\n".join(line.replace("Content: ", "").strip() for line in lines[1:])
        slides.append({"title": title, "text": text})
    
    return slides

def create_presentation(topic, slides, output_file="Smart_Presentation.pptx"):
    """Creates a PowerPoint presentation from generated slide content."""
    prs = Presentation()
    
    # Title Slide
    title_slide_layout = prs.slide_layouts[0]  # Title slide layout
    slide = prs.slides.add_slide(title_slide_layout)
    slide.shapes.title.text = topic
    slide.placeholders[1].text = "Generated by AI Smart Presentation"

    # Content Slides
    for slide_data in slides:
        slide_layout = prs.slide_layouts[1]  # Title and Content layout
        slide = prs.slides.add_slide(slide_layout)
        slide.shapes.title.text = slide_data["title"]
        body = slide.placeholders[1]
        
        wrapped_text = "\n".join(textwrap.wrap(slide_data["text"], width=80))
        body.text = wrapped_text

    # Save Presentation
    prs.save(output_file)
    print(f"Presentation saved as {output_file}")

if __name__ == "__main__":
    topic = input("Enter the topic for your presentation: ")
    slides_content = generate_presentation_content(topic)
    create_presentation(topic, slides_content)
